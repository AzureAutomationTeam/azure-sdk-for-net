// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Automation
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ConnectionOperations.
    /// </summary>
    public static partial class ConnectionOperationsExtensions
    {
            /// <summary>
            /// Delete the connection.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The name of connection.
            /// </param>
            public static Connection Delete(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName)
            {
                return ((IConnectionOperations)operations).DeleteAsync(resourceGroupName, automationAccountName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the connection.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The name of connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Connection> DeleteAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, automationAccountName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the connection identified by connection name.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The name of connection.
            /// </param>
            public static Connection Get(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName)
            {
                return ((IConnectionOperations)operations).GetAsync(resourceGroupName, automationAccountName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the connection identified by connection name.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The name of connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Connection> GetAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, automationAccountName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a connection.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The parameters supplied to the create or update connection operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the create or update connection operation.
            /// </param>
            public static Connection CreateOrUpdate(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName, ConnectionCreateOrUpdateParameters parameters)
            {
                return ((IConnectionOperations)operations).CreateOrUpdateAsync(resourceGroupName, automationAccountName, connectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a connection.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The parameters supplied to the create or update connection operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the create or update connection operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Connection> CreateOrUpdateAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName, ConnectionCreateOrUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, automationAccountName, connectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a connection.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The parameters supplied to the update a connection operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the update a connection operation.
            /// </param>
            public static Connection Update(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName, ConnectionUpdateParameters parameters)
            {
                return ((IConnectionOperations)operations).UpdateAsync(resourceGroupName, automationAccountName, connectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a connection.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='connectionName'>
            /// The parameters supplied to the update a connection operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the update a connection operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Connection> UpdateAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, string connectionName, ConnectionUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, automationAccountName, connectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a list of connections.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Connection> ListByAutomationAccount(this IConnectionOperations operations, string resourceGroupName, string automationAccountName)
            {
                return ((IConnectionOperations)operations).ListByAutomationAccountAsync(resourceGroupName, automationAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of connections.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Connection>> ListByAutomationAccountAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByAutomationAccountWithHttpMessagesAsync(resourceGroupName, automationAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a list of connections.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Connection> ListByAutomationAccountNext(this IConnectionOperations operations, string nextPageLink)
            {
                return ((IConnectionOperations)operations).ListByAutomationAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of connections.
            /// <see href="http://aka.ms/azureautomationsdk/connectionoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Connection>> ListByAutomationAccountNextAsync(this IConnectionOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByAutomationAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
