// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Automation
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for NodeReportsOperations.
    /// </summary>
    public static partial class NodeReportsOperationsExtensions
    {
            /// <summary>
            /// Retrieve the Dsc node report list by node id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='nodeId'>
            /// The parameters supplied to the list operation.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DscNodeReport> ListByNode(this INodeReportsOperations operations, string resourceGroupName, string automationAccountName, string nodeId, string filter = default(string))
            {
                return ((INodeReportsOperations)operations).ListByNodeAsync(resourceGroupName, automationAccountName, nodeId, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the Dsc node report list by node id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='nodeId'>
            /// The parameters supplied to the list operation.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DscNodeReport>> ListByNodeAsync(this INodeReportsOperations operations, string resourceGroupName, string automationAccountName, string nodeId, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByNodeWithHttpMessagesAsync(resourceGroupName, automationAccountName, nodeId, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the Dsc node report data by node id and report id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='nodeId'>
            /// The Dsc node id.
            /// </param>
            /// <param name='reportId'>
            /// The report id.
            /// </param>
            public static DscNodeReport Get(this INodeReportsOperations operations, string resourceGroupName, string automationAccountName, string nodeId, string reportId)
            {
                return ((INodeReportsOperations)operations).GetAsync(resourceGroupName, automationAccountName, nodeId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the Dsc node report data by node id and report id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='nodeId'>
            /// The Dsc node id.
            /// </param>
            /// <param name='reportId'>
            /// The report id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DscNodeReport> GetAsync(this INodeReportsOperations operations, string resourceGroupName, string automationAccountName, string nodeId, string reportId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, automationAccountName, nodeId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the Dsc node reports by node id and report id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='nodeId'>
            /// The Dsc node id.
            /// </param>
            /// <param name='reportId'>
            /// The report id.
            /// </param>
            public static System.IO.Stream GetContent(this INodeReportsOperations operations, string resourceGroupName, string automationAccountName, string nodeId, string reportId)
            {
                return ((INodeReportsOperations)operations).GetContentAsync(resourceGroupName, automationAccountName, nodeId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the Dsc node reports by node id and report id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='automationAccountName'>
            /// The automation account name.
            /// </param>
            /// <param name='nodeId'>
            /// The Dsc node id.
            /// </param>
            /// <param name='reportId'>
            /// The report id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.IO.Stream> GetContentAsync(this INodeReportsOperations operations, string resourceGroupName, string automationAccountName, string nodeId, string reportId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.GetContentWithHttpMessagesAsync(resourceGroupName, automationAccountName, nodeId, reportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the Dsc node report list by node id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DscNodeReport> ListByNodeNext(this INodeReportsOperations operations, string nextPageLink)
            {
                return ((INodeReportsOperations)operations).ListByNodeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the Dsc node report list by node id.
            /// <see href="http://aka.ms/azureautomationsdk/dscnodereportoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DscNodeReport>> ListByNodeNextAsync(this INodeReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByNodeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
